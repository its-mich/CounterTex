@model CounterTexFront.Models.ProduccionDiariaViewModel

@{
    ViewBag.Title = "Registrar Producción Diaria";
    Layout = "~/Views/Shared/_LayoutEmpleado.cshtml";
    var usuario = Session["Usuario"] as CounterTexFront.Models.LoginResponse;
    var usuarioId = usuario?.Id ?? 0;
    var usuarioNombre = usuario?.Nombres;
}

@section Styles {
    <style>
        body {
            color: white;
            background-color: transparent;
        }

        .form-section {
            background-color: #2c2c2c;
            border-radius: 12px;
            padding: 30px;
            box-shadow: 0 0 15px rgba(0, 0, 0, 0.2);
        }

        h2, h4, label {
            color: white;
        }

        .detalle-item {
            background-color: #2d2d2d;
            border: 1px solid #555;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 15px;
            color: white;
        }

        .dropdown-records {
            background-color: #1c1c1c;
            padding: 20px;
            border-radius: 10px;
            color: #ddd;
            border: 1px solid #444;
        }

        .record-item {
            border-bottom: 1px dashed #666;
            padding: 5px 0;
            font-size: 14px;
        }

        .accordion-button {
            background-color: #343a40;
            color: white;
        }

        .form-control[readonly] {
            background-color: #3b3b3b;
            color: white;
        }
    </style>
}

<div class="container mt-4">
    <div class="form-section mb-5">
        @if (TempData["SuccessMessage"] != null)
        {
            <div class="alert alert-success">@TempData["SuccessMessage"]</div>
        }

        @if (TempData["ErrorMessage"] != null)
        {
            <div class="alert alert-danger">@TempData["ErrorMessage"]</div>
        }

        @using (Html.BeginForm("Index", "ProduccionDiaria", FormMethod.Post, new { @class = "needs-validation", novalidate = "novalidate" }))
        {
            @Html.AntiForgeryToken()

            @Html.HiddenFor(m => m.UsuarioId, new { Value = usuarioId })

            <div class="form-group">
                @Html.Label("Empleado")
                <input type="text" class="form-control" value="@usuarioNombre" readonly />
            </div>

            <div class="form-group">
                @Html.LabelFor(m => m.Fecha)
                @Html.TextBoxFor(m => m.Fecha, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date", required = "required" })
            </div>

            <div class="form-group">
                @Html.LabelFor(m => m.PrendaId)
                @Html.DropDownListFor(m => m.PrendaId, Model.Prendas, "-- Seleccione Prenda --", new { @class = "form-control", required = "required" })
            </div>

            <h4 class="mt-4 text-light">Detalles de Producción</h4>

            <div id="detalles">
                @for (int i = 0; i < Model.ProduccionDetalles.Count; i++)
                {
                    <div class="detalle-item">
                        @Html.HiddenFor(m => m.ProduccionDetalles[i].Id)

                        <div class="form-group">
                            @Html.LabelFor(m => m.ProduccionDetalles[i].Cantidad)
                            @Html.TextBoxFor(m => m.ProduccionDetalles[i].Cantidad, new
                       {
                           @class = "form-control cantidad-input",
                           type = "text",
                           maxlength = 4,
                           pattern = "\\d{1,4}",
                           placeholder = "Digite un valor valido mayor a 0",
                           required = "required",
                           inputmode = "numeric"
                       })
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(m => m.ProduccionDetalles[i].OperacionId)
                            @Html.DropDownListFor(m => m.ProduccionDetalles[i].OperacionId, Model.Operaciones, "-- Seleccione Operación --", new { @class = "form-control", required = "required" })
                        </div>
                    </div>
                }
            </div>

            <div class="text-center mt-4">
                <input type="submit" value="Guardar Producción Diaria" class="btn btn-success btn-lg px-4" />
            </div>
        }
    </div>

    <div class="accordion" id="accordionRegistros">
        <div class="card bg-dark text-white">
            <div class="card-header" id="headingOne">
                <h2 class="mb-0">
                    <button class="btn btn-info btn-block text-left" type="button" data-toggle="collapse" data-target="#collapseRegistros" aria-expanded="true" aria-controls="collapseRegistros">
                        Mostrar Registros Anteriores del Usuario
                    </button>
                </h2>
            </div>

            <div id="collapseRegistros" class="collapse" aria-labelledby="headingOne" data-parent="#accordionRegistros">
                <div class="card-body">
                    <div class="dropdown-records" id="registrosPrevios">
                        <strong class="text-secondary">📋 Registros anteriores del usuario:</strong>
                        <div id="lista-registros"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
        window.addEventListener("DOMContentLoaded", function () {
            const usuarioId = "@usuarioId";
            const listaDiv = document.getElementById("lista-registros");

            fetch(`/ProduccionDiaria/ObtenerRegistrosPorUsuario?usuarioId=${usuarioId}`)
                .then(response => response.json())
                .then(data => {
                    listaDiv.innerHTML = "";

                    if (data && data.length > 0) {
                        data.forEach(item => {
                            const record = document.createElement("div");
                            record.className = "record-item";
                            record.innerHTML = `
                                <i class="fas fa-calendar-alt me-1"></i><strong> ${item.Fecha}</strong> |
                                <i class="fas fa-tshirt me-1"></i><strong> ${item.PrendaNombre}</strong> |
                                <strong>Cant:</strong> ${item.TotalCantidad} |
                                <strong>Total:</strong> $${item.TotalValor.toFixed(2)}
                            `;
                            listaDiv.appendChild(record);
                        });
                    } else {
                        listaDiv.innerHTML = "<em>No hay registros anteriores para este usuario.</em>";
                    }
                })
                .catch(error => {
                    listaDiv.innerHTML = "<em>Error al cargar registros.</em>";
                    console.error("Error al obtener registros:", error);
                });

            document.querySelectorAll(".cantidad-input").forEach(input => {
                input.addEventListener("input", function () {
                    let valor = this.value.replace(/[^\d]/g, '');
                    if (valor.length > 4) valor = valor.slice(0, 4);
                    if (parseInt(valor) > 1000) valor = "1000";
                    this.value = valor;
                });
            });
        });

        document.querySelector("form").addEventListener("submit", function (e) {
            const cantidades = document.querySelectorAll(".cantidad-input");
            let tieneAlMenosUnaValida = false;

            for (let input of cantidades) {
                const valor = input.value.trim();
                const numero = parseInt(valor);

                if (!/^\d{1,4}$/.test(valor)) {
                    e.preventDefault();
                    Swal.fire({
                        icon: 'warning',
                        title: 'Cantidad inválida',
                        text: 'Solo puedes ingresar números de hasta 4 cifras.',
                        confirmButtonColor: '#3085d6'
                    });
                    input.focus();
                    return;
                }

                if (numero <= 0) {
                    e.preventDefault();
                    Swal.fire({
                        icon: 'error',
                        title: 'Cantidad requerida',
                        text: 'La cantidad debe ser mayor a 0.',
                        confirmButtonColor: '#d33'
                    });
                    input.focus();
                    return;
                }

                if (numero > 1000) {
                    e.preventDefault();
                    Swal.fire({
                        icon: 'warning',
                        title: 'Cantidad excedida',
                        text: 'La cantidad máxima permitida es 1000.',
                        confirmButtonColor: '#f39c12'
                    });
                    input.focus();
                    return;
                }

                tieneAlMenosUnaValida = true;
            }

            if (!tieneAlMenosUnaValida) {
                e.preventDefault();
                Swal.fire({
                    icon: 'error',
                    title: 'Sin detalles válidos',
                    text: 'Debes ingresar al menos un detalle de producción con cantidad válida.',
                    confirmButtonColor: '#d33'
                });
            }
        });
    </script>
}
